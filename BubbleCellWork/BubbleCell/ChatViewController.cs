using System;using System.Collections.Generic;using System.Linq;using MonoTouch.Dialog;using MonoTouch.Foundation;using MonoTouch.UIKit;using System.Drawing;namespace BubbleCell{	[Register ("ChatViewController")]	public class ChatViewController : UIViewController	{		UIView rootView;		UITableView tableView;		MessageBarView messageBar;		BubbleTableSubController bubbleTableSubController = new BubbleTableSubController ( );		MessageBarController messageBarController;		KeyboardController keyboardController;		public ChatViewController ( )		{		}		public override void ViewDidLoad ( )		{			base.ViewDidLoad ( );			var backgroundColor = new UIColor ( 0.859f, 0.866f, 0.929f, 1 );			View.BackgroundColor = backgroundColor;			rootView = new UIView ( View.Bounds );			rootView.AutoresizingMask = UIViewAutoresizing.FlexibleHeight | UIViewAutoresizing.FlexibleWidth;			View.Add ( rootView );			var tableRect = View.Bounds;			tableRect.Height -= ( MessageBarView.EntryHeight );			tableView = new UITableView ( tableRect );			tableView.AutoresizingMask = UIViewAutoresizing.FlexibleHeight | UIViewAutoresizing.FlexibleWidth;			tableView.BackgroundColor = backgroundColor;			bubbleTableSubController.LoadView ( tableView );			messageBar = new MessageBarView ( new RectangleF ( 0, tableRect.Bottom, tableRect.Width, MessageBarView.EntryHeight ) );			messageBar.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleTopMargin;			rootView.Add ( tableView );			rootView.Add ( messageBar );			keyboardController = new KeyboardController ( View, rootView, messageBar, tableView );			messageBarController = new MessageBarController ( messageBar, tableView, rootView );			messageBarController.OnSendMessage += messageBarController_OnSendMessage;		}		public event EventHandler<EventArgs> OnSendMessage;		public SendMessageAction SendMessageAction { get; set; }		private void messageBarController_OnSendMessage ( object sender, EventArgs e )		{			if ( SendMessageAction != SendMessageAction.None )			{				AddBubble ( SendMessageAction.ToBubbleCellPosition ( ), MessageText );				ClearMessageText ( );				ScrollToBottom ( true );			}			if ( OnSendMessage != null )				OnSendMessage ( this, EventArgs.Empty );		}		[Obsolete ( "Deprecated in iOS 6.0" )]		public override void ViewDidUnload ( )		{			keyboardController.UnhookObservers ( );			base.ViewDidUnload ( );		}		public void AddBubble ( BubbleCellPosition position, string caption )		{			bubbleTableSubController.AddBubble ( position, caption );		}		public void AddBubbles ( IEnumerable<BubbleCellData> cellData )		{			bubbleTableSubController.AddBubbles ( cellData );		}		public bool LeftThinking		{			get			{				return bubbleTableSubController.LeftThinking;			}			set			{				bubbleTableSubController.LeftThinking = value;			}		}		public bool RightThinking		{			get			{				return bubbleTableSubController.RightThinking;			}			set			{				bubbleTableSubController.RightThinking = value;			}		}		public void ClearMessageText ( )		{			if ( messageBarController != null )				messageBarController.ClearMessageText ( );		}		public void ScrollToBottom ( bool animate )		{			if ( bubbleTableSubController != null )				bubbleTableSubController.ScrollToBottom ( animate );		}		public string MessageText		{			get			{				if ( messageBar != null )					return messageBar.TextEntry.Text;				return string.Empty;			}		}	}}